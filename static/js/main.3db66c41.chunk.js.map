{"version":3,"sources":["api/index.tsx","store/loading.ts","store/index.ts","helpers/index.ts","components/TodoList/TodoList.tsx","components/Filters/Filters.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","request","url","a","fetch","response","ok","Error","status","json","getTodos","getUser","id","isLoading","state","loading","setLoading","type","value","setUser","user","setUserSelected","userSelected","isUserSelected","getListOfTodos","todos","getUserId","userId","getUserInfo","getSearchQuery","searchQuery","getFilterStatus","filterStatus","updateTodoItem","map","todo","completed","initialState","isUserError","store","createStore","action","todosStatusChanged","composeWithDevTools","applyMiddleware","thunk","filters","All","Active","Completed","TodoList","useSelector","dispatch","useDispatch","areTodosLoading","filterByQuery","title","toLowerCase","includes","filterByStatus","filteredTodos","useMemo","length","filter","sortedTodos","className","key","readOnly","checked","onClick","Filters","filtersKeys","Object","keys","name","placeholder","onChange","e","setSearchQuery","target","setFilterStatus","filterKey","CurrentUser","fetchUserData","then","data","catch","result","console","warn","message","setUserError","useEffect","email","phone","App","fetchTodos","setTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3db66c41.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = async(url: string) => {\n  const response = await fetch(BASE_URL + url);\n  \n  if (!response.ok) {\n    throw new Error(`${response.status}`);\n  }\n  \n  return response.json();\n};\n\nexport const getTodos = async() => {\n  const response = await request('todos/');\n\n  return response;\n};\n\nexport const getUser = async (id: number) => {\n  const response = await request('users/' + id);\n\n  return response;\n};\n\n// If we need to update a Todo\nexport const updateTodo = async(todo: any, id: string) => {\n  const response = await fetch(`${BASE_URL}/todos/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json',\n      'accept': 'application/json'\n    },\n    body: JSON.stringify({ ...todo })\n  })\n  \n  return response.json();\n}\n","\nimport { RootState } from '../types';\n\n// Action types\nexport const SET_LOADING = 'SET_LOADING';\n\n// Selectors\nexport const isLoading = (state: RootState) => state.loading;\n","import { createStore, AnyAction, Dispatch, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport { getTodos, getUser, updateTodo } from '../api';\nimport { Todo, RootState, User } from '../types';\nimport { SET_LOADING } from './loading';\n\n// Action types - is just a constant. MUST have a unique value.\nconst GET_TODOS = 'GET_TODOS';\nconst SET_USERID = 'SET_USERID';\nconst SET_USER = 'SET_USER';\nconst SET_USER_ERROR = 'SET_USER_ERROR';\nconst SET_USER_SELECTED = 'SET_USER_SELECTED';\nconst SET_SEARCH_QUERY = 'SET_INPUT_QUERY';\nconst SET_FILTER_STATUS = 'SET_FILTER_STATUS';\nconst SET_TODOS_CHANGED_STATUS = 'SET_TODOS_CHANGED_STATUS';\nconst UPDATE_TODO_ITEM = 'UPDATE_TODO_ITEM';\n\n// Action creators - a function returning an action object\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\nexport const setTodos = (todos: Todo[]) => ({ type: GET_TODOS, value: todos });\nexport const setTodosChangedStatus = (status: boolean) => ({ type: SET_TODOS_CHANGED_STATUS, value: status });\nexport const updateTodoStatus = (id: number) => ({ type: UPDATE_TODO_ITEM, value: id });\nexport const setUserId = (id: number) => ({ type: SET_USERID, value: id });\nexport const setUser = (user: User | null) => ({ type: SET_USER, value: user });\nexport const setUserError = (isUserError: boolean) => ({ type: SET_USER_ERROR, value: isUserError });\nexport const setUserSelected = (userSelected: boolean) => ({ type: SET_USER_SELECTED, value: userSelected });\nexport const setSearchQuery = (searchQuery: string) => ({ type: SET_SEARCH_QUERY, value: searchQuery });\nexport const setFilterStatus = (filterStatus: string) => ({ type: SET_FILTER_STATUS, value: filterStatus });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isUserError = (state: RootState) => state.isUserError;\nexport const isUserSelected = (state: RootState) => state.isUserSelected;\nexport const getListOfTodos = (state: RootState) => state.todos;\nexport const getTodoStatus = (state: RootState) => state.todos;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getUserInfo = (state: RootState) => state.user;\nexport const getSearchQuery = (state: RootState) => state.searchQuery;\nexport const getFilterStatus = (state: RootState) => state.filterStatus;\n\nexport const getTodosFromServer = () => {\n  return (dispatch: Dispatch) => {\n\n    getTodos()\n      .then(todos => {\n        dispatch(setTodos(todos.data));\n      })\n      .catch(result => {\n        console.warn(result.message);\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n};\n\nexport const getUserFromServer = (id: number) => {\n  return (dispatch: Dispatch) => {\n    getUser(id)\n      .then(user => {\n        dispatch(setUser(user.data));\n      })\n      .catch(result => {\n        console.warn('Failed loading user data.', result.message);\n        dispatch(setUserError(true));\n      });\n  };\n};\n\n// Not used method\nexport const updateTodoOnServer = (todo: Todo, id: string) => {\n  return () => {\n    updateTodo(todo, id)\n      .then(response => {\n        console.info('%cUpdated todo with ID ' + id, 'color: #159a32');\n        console.table(response);\n      })\n      .catch(result => {\n        console.error(result.message);\n      });\n  };\n}\n\n// NOTE: Suggestion from\n// https://redux.js.org/usage/structuring-reducers\n// ->/immutable-update-patterns#updating-an-item-in-an-array\nconst updateTodoItem = (todos: Todo[], id: number) => {\n  return todos.map(todo => {\n    if (todo.id !== id) {\n      return todo;\n    }\n\n    return {\n      ...todo,\n      completed: !todo.completed,\n    }\n  })\n}\n\n// Initial state\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n  userId: 0,\n  isUserSelected: false,\n  isUserError: false,\n  searchQuery: '',\n  filterStatus: '',\n  loading: false\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        todos: [...action.value],\n      };\n      \n    case SET_TODOS_CHANGED_STATUS:\n      return {\n        ...state,\n        todosStatusChanged: action.value,\n      };\n\n    case UPDATE_TODO_ITEM:\n      return {\n        ...state,\n        todos: updateTodoItem(state.todos, action.value),\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.value\n      };\n    \n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value,\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.value,\n      };\n    \n    case SET_USER_SELECTED:\n      return {\n        ...state,\n        isUserSelected: action.value,\n      };\n\n    case SET_USER_ERROR:\n      return {\n        ...state,\n        isUserError: action.value,\n      };\n    \n    case SET_SEARCH_QUERY:\n      return {\n        ...state,\n        searchQuery: action.value,\n      };\n\n    case SET_FILTER_STATUS:\n      return {\n        ...state,\n        filterStatus: action.value,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { Filter } from '../types';\n\nexport const filters: Filter = {\n  All: 'All',\n  Active: 'Active',\n  Completed: 'Completed',\n};\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Todo } from '../../types';\n\nimport {\n  getListOfTodos,\n  setTodosChangedStatus,\n  updateTodoStatus,\n  setUserId,\n  setUserSelected,\n  getSearchQuery,\n  getFilterStatus\n} from '../../store';\nimport { isLoading } from '../../store/loading';\n\nimport { filters } from '../../helpers';\n\nimport './TodoList.scss';\n\nexport const TodoList = () => {\n  const todos: Todo[] = useSelector(getListOfTodos);\n  const dispatch = useDispatch();\n\n  const searchQuery = useSelector(getSearchQuery);\n  const filterStatus = useSelector(getFilterStatus);\n  const areTodosLoading: boolean = useSelector(isLoading);\n\n  const filterByQuery = (todo: Todo) => {\n    if (todo.title !== null) {\n      return todo.title.toLowerCase()\n        .includes(searchQuery.toLowerCase());\n    }\n\n    return null;\n  }\n\n  const filterByStatus = (todo: Todo) => {\n    switch (filterStatus) {\n      case filters.Completed:\n        return todo.completed;\n      case filters.Active:\n        return !todo.completed;\n      default:\n        return true;\n    }\n  }\n\n  const filteredTodos = useMemo(() => {\n    if (!searchQuery.length) {\n      return todos;\n    }\n\n    return todos.filter(filterByQuery);\n  }, [todos, searchQuery]);\n\n  const sortedTodos = useMemo(() => {\n    return filteredTodos.filter(filterByStatus);\n  }, [filteredTodos, filterStatus]);\n\n  return (\n    <div className=\"TodoList\">\n      <h3>Todos:</h3>\n\n      {areTodosLoading ? (\n        <p className=\"info\">Loading...</p>\n      ) : (\n        <div className=\"TodoList__container\">\n          <ul className=\"TodoList__list\">\n            {sortedTodos.map((todo: Todo) => (\n              <li key={todo.id}>\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onClick={() => {\n                      dispatch(setTodosChangedStatus(true));\n                      dispatch(updateTodoStatus(todo.id));\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(setUserId(todo.userId));\n                    dispatch(setUserSelected(true));\n                  }}\n                >\n                  User ID#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { filters } from '../../helpers';\nimport './Filters.scss';\n\nimport {\n  setSearchQuery, getSearchQuery,\n  setFilterStatus, getFilterStatus\n} from '../../store';\n\nexport const Filters = () => {\n  const filtersKeys = Object.keys(filters);\n\n  const dispatch = useDispatch();\n  const searchQuery = useSelector(getSearchQuery);\n  const filterStatus = useSelector(getFilterStatus);\n\n  return (\n    <form className=\"TodoList__list-filters\">\n      <input\n        type=\"text\"\n        name=\"filterTitle\"\n        value={searchQuery}\n        placeholder=\"filter todos\"\n        onChange={(e) => {\n          dispatch(setSearchQuery(e.target.value));\n        }}\n      />\n\n      <select\n        name=\"filterStatus\"\n        value={filterStatus}\n        onChange={(e) => {\n          dispatch(setFilterStatus(e.target.value));\n        }}\n      >\n        {filtersKeys.map(filterKey => (\n          <option key={filterKey}>{filters[filterKey]}</option>\n        ))}\n      </select>\n    </form>\n  );\n};\n","import React, { useEffect, FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { User } from '../../types';\n\nimport {\n  getUserId,\n  setUserSelected,\n  getUserFromServer,\n  getUserInfo,\n  setUser\n} from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: FC = () => {\n\n  const dispatch = useDispatch();\n\n  const user: User | null = useSelector(getUserInfo);\n  const userId: number = useSelector(getUserId);\n\n  const fetchUserData = () => {\n    return dispatch(getUserFromServer(userId));\n  };\n\n  useEffect(() => {\n    if (userId && userId > 0) {\n      fetchUserData();\n    }\n  }, [userId]);\n\n  const clearUser = () => {\n    dispatch(setUser(null));\n    dispatch(setUserSelected(false));\n  }\n\n  if (!user) {\n    return (\n      <p className=\"warning pl-30\">Loading user data has failed.</p>\n    )\n  } else {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user with ID ${userId}`}\n          </span>\n        </h2>\n  \n        {(user.name && user.email) ? (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </>\n        ) : (\n          <p className=\"info pl-30\">This user has not enough details.</p>\n        )}\n  \n        <div className=\"CurrentUser__buttons\">\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={clearUser}\n          >\n            Clear user\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\n\nimport { getTodosFromServer, isUserSelected, setLoading } from './store';\n\nimport { TodoList } from './components/TodoList';\nimport { Filters } from './components/Filters';\nimport { CurrentUser } from './components/CurrentUser';\n\n\nconst App = () => {\n\n  const dispatch = useDispatch();\n\n  const userSelected: boolean = useSelector(isUserSelected);\n\n  const fetchTodos = () => {\n    dispatch(setLoading(true));\n    return dispatch(getTodosFromServer());\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n\n      <Filters />\n\n      <div className=\"App__columns\">        \n        <TodoList />\n\n        {userSelected ? (\n          <CurrentUser />\n        ) : \n          <p className=\"info pl-30\">No user selected</p>}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}